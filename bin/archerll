#! /bin/bash -e
# 
# (C) 2006 by Argonne National Laboratory.
#     See COPYRIGHT in top-level directory.
#
# archercc
# Simple script to compile and/or link MPI programs.
# This script knows the default flags and libraries, and can handle
# alternative C compilers and the associated flags and libraries.
# The important terms are:
#    includedir, libdir - Directories containing an *installed* mpich2
#    prefix, execprefix - Often used to define includedir and libdir
#    CC                 - C compiler
#    WRAPPER_CFLAGS        - Any special flags needed to compile 
#    WRAPPER_LDFLAGS       - Any special flags needed to link
#    WRAPPER_LIBS          - Any special libraries needed in order to link
#    MPILIBNAME         - Name of the MPI library
#    
# We assume that (a) the C compiler can both compile and link programs
#
# Handling of command-line options:
#   This is a little tricky because some options may contain blanks.
#
# Special issues with shared libraries - todo
#
# --------------------------------------------------------------------------
# Set the default values of all variables.
#
# Directory locations: Fixed for any MPI implementation.
# Set from the directory arguments to configure (e.g., --prefix=/usr
prefix=/usr
exec_prefix=/usr
sysconfdir=/etc/mpich2
includedir=/usr/include/mpich2
libdir=/usr/lib

# Default settings for compiler, flags, and libraries.
# Determined by a combination of environment variables and tests within
# configure (e.g., determining whehter -lsocket is needee)
CC="clang"
C_LINKPATH_SHL=""
CFLAGS=" "
CPPFLAGS="-D_FORTIFY_SOURCE=2 "
LDFLAGS=" -Wl,-Bsymbolic-functions -Wl,-z,relro "
LIBS="-lopa -lmpl -lrt -lcr -lpthread -lstdc++"
MPILIBNAME="mpich"
PMPILIBNAME="pmpich"
NEEDSPLIB="no"
# MPICH2_VERSION is the version of the MPICH2 library that mpicc is intended for
MPICH2_VERSION="1.4.1"

#
# ------------------------------------------------------------------------
# Argument processing.
# This is somewhat awkward because of the handling of arguments within
# the shell.  We want to handle arguments that include spaces without 
# loosing the spacing (an alternative would be to use a more powerful
# scripting language that would allow us to retain the array of values, 
# which the basic (rather than enhanced) Bourne shell does not.  
#
# Look through the arguments for arguments that indicate compile only.
# If these are *not* found, add the library options

linking=yes
direct_compiling=no
allargs=("$@")
argno=0
for arg in "$@" ; do
    # Set addarg to no if this arg should be ignored by the C compiler
    addarg=yes
    case "$arg" in 
 	# ----------------------------------------------------------------
	# Compiler options that affect whether we are linking or no
    -c|-S|-E|-M|-MM)
    # The compiler links by default
    linking=no
    ;;
	# ----------------------------------------------------------------
	# Options that control how we use mpicc (e.g., -show, 
	# -cc=* -config=*
    -echo)
    addarg=no
    set -x
    ;;
    -cc=*)
    CC=`echo A$arg | sed -e 's/A-cc=//g'`
    addarg=no
    ;;
    -show)
    addarg=no
    Show=
    ;;
    -config=*)
    addarg=no
    CCname=`echo A$arg | sed -e 's/A-config=//g'`
    if [ -s "$sysconfdir/mpicc-$CCname.conf" ] ; then
        . "$sysconfdir/mpicc-$CCname.conf"
    else
	echo "Configuration file mpicc-$CCname.conf not found"
    fi
    ;;
    -compile-info|-compile_info)
    # -compile_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -link-info|-link_info)
    # -link_info included for backward compatibility
    Show=echo
    addarg=no
    ;;
    -v)
    # Pass this argument to the compiler as well.
    echo "mpicc for MPICH2 version $MPICH2_VERSION"
    # if there is only 1 argument, it must be -v.
    if [ "$#" -eq "1" ] ; then
        linking=no
    fi
    ;;
    -profile=*)
    # Pass the name of a profiling configuration.  As
    # a special case, lib<name>.so or lib<name>.la may be used
    # if the library is in $libdir
    profConf=`echo A$arg | sed -e 's/A-profile=//g'`
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -mpe=*)
    # Pass the name of a profiling configuration; this is a special
    # case for the MPE libs.  See -profile
    profConf=`echo A$arg | sed -e 's/A-mpe=//g'`
    profConf="mpe_$profConf"
    addarg=no
    # Loading the profConf file is handled below
    ;;
    -nativelinking)
    # Internal option to use native compiler for linking without MPI libraries
    nativelinking=yes
    addarg=no
    ;;
    -help)
    NC=`echo "$CC" | sed 's%\/% %g' | awk '{print $NF}' -`
    if [ -f "$sysconfdir/mpixxx_opts.conf" ] ; then
        . $sysconfdir/mpixxx_opts.conf
        echo "    -cc=xxx       - Reset the native compiler to xxx."
    else
        if [ -f "./mpixxx_opts.conf" ] ; then
            . ./mpixxx_opts.conf
            echo "    -cc=xxx       - Reset the native compiler to xxx."
        fi
    fi
    exit 0
    ;;
    -D*)
    VARIABLES+=$arg" "
    # echo $VARIABLES
    ;;
    -I*)
    INCLUDES+=$arg" "
    # echo $VARIABLES
    ;;
    *)
    if [[ $arg == *".c" ]] || [[ $arg == *".cc" ]] || [[ $arg == *".cpp" ]]
    then
	PROG_NAME=$(echo $arg | awk -F"/" '{ print $NF}')
	OBJ_NAME="${PROG_NAME%.*}.o"
	DIR_NAME=$(echo $arg | awk -F$PROG_NAME '{ print $1}')
	if [ "$linking" = yes ] ; then
	    direct_compiling=yes
	fi
    # else
    # 	echo "archercc error: unrecognized command line option '${allargs[@]}'"
    # 	exit
    fi
    ;;

    esac
    if [ $addarg = no ] ; then
	unset allargs[$argno]
    fi
    # Some versions of bash do not accept ((argno++))
    argno=`expr $argno + 1`
done

if [ $# -eq 0 ] ; then
    echo "Error: Command line argument is needed!"
    "$0" -help
    exit 1
fi

######################
# Cleaning environment
######################
# rm -rf .blacklists
if [ -n "$PROG_NAME" ]; then
    $Show rm -rf .blacklists/$PROG_NAME.*
fi

###################
# Create empty blacklist file
###################
$Show mkdir -p .blacklists
$Show touch .blacklists/$PROG_NAME.bl

# -----------------------------------------------------------------------
# Derived variables.  These are assembled from variables set from the
# default, environment, configuration file (if any) and command-line
# options (if any)
if [ "$NEEDSPLIB" = yes ] ; then
    mpilibs="-l$PMPILIBNAME -l$MPILIBNAME"
else
    mpilibs="-l$MPILIBNAME"
fi

# Handle the case of a profile switch
if [ -n "$profConf" ] ; then
    profConffile=
    if [ -s "$libdir/lib$profConf.a" -o -s "$libdir/lib$profConf.so" ] ; then
	mpilibs="-l$profConf $mpilibs"
    elif [ -s "$sysconfdir/$profConf.conf" ] ; then
	profConffile="$sysconfdir/$profConf.conf"
    elif [ -s "$profConf.conf" ] ; then
        profConffile="$profConf.conf"
    else
        echo "Profiling configuration file $profConf.conf not found in $sysconfdir"
    fi
    if [ -n "$profConffile" -a -s "$profConffile" ] ; then
	. $profConffile
	if [ -n "$PROFILE_INCPATHS" ] ; then
	    CFLAGS="$PROFILE_INCPATHS $CFLAGS"
        fi
        if [ -n "$PROFILE_PRELIB" ] ; then
	    mpilibs="$PROFILE_PRELIB $mpilibs"
        fi
        if [ -n "$PROFILE_POSTLIB" ] ; then
	    mpilibs="$mpilibs $PROFILE_POSTLIB"
        fi
    fi
fi

$Show mv .blacklists/function_calls.fc.tmp .blacklists/function_calls.fc
$Show rm -rf .blacklists/function_calls.fc.tmp

for i in .blacklists/*.bl; do
    name=$(echo $i | awk -F"/" '{ print $2}')
    filename="${name%.*}"
    $Show archer-cmp $filename
done

for j in .blacklists/*.bl; do
    name=$(echo $j | awk -F"/" '{ print $2}')
    filename="${name%.*}"
    objname="${filename%.*}.o"
    $Show $CC -fopenmp -O0 -g -fPIC \
	$INCLUDES \
    	$VARIABLES \
    	-I$HOME/usr/lib/gcc/x86_64-unknown-linux-gnu/4.9.1/include \
    	-I$includedir \
    	-fsanitize=thread -fsanitize-blacklist=.blacklists/$filename.bl \
    	-c $DIR_NAME$filename -o $objname
    
    $Show rm -rf *.ll *.bc
done

exit $rc
